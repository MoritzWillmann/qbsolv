environment:

  # PyPI login
  TWINE_USERNAME: dwtools
  TWINE_PASSWORD:
    secure: 9/YAQhmz9Kb1ZeXzhBYeQA==

  matrix:
    - PYTHON: "C:\\Python36-x64"
    - PYTHON: "C:\\Python37-x64"
    - PYTHON: "C:\\Python38-x64"
    - PYTHON: "C:\\Python39-x64"
    - PYTHON: "C:\\Python310-x64"

install:
  # Check that we have the expected version and architecture for Python
  - "%PYTHON%\\python.exe --version"
  - "%PYTHON%\\python.exe -c \"import struct; print(struct.calcsize('P') * 8)\""

  # install dependencies
  - "%PYTHON%\\python.exe -m pip install -r requirements.txt -r tests\\requirements.txt"
  - "%PYTHON%\\python.exe -m pip install wheel twine"

build_script:
  # build the compiled extension and install qbsolv
  - "%PYTHON%\\python.exe setup.py build_ext --inplace"
  - "%PYTHON%\\python.exe -m pip install ."

test_script:
  - "%PYTHON%\\python.exe -m unittest discover"
  
after_test:
  # If tests are successful, create binary wheels
  - "%PYTHON%\\python.exe setup.py bdist_wheel"
  - ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

deploy_script:
  - cmd: "if [%APPVEYOR_REPO_TAG%]==[true] if NOT [%CPPDEBUG%]==[1] %PYTHON%\\Scripts\\twine upload --skip-existing dist\\*.whl"
